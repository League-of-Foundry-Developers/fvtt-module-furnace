{"_id":"23kTIYmN7vqvmjF5","name":"toggle-playlist-sound","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3},"type":"script","flags":{},"scope":"global","command":"/* This macro requires the advanced macros of Furnace and Playlist QoL\r\n * This will toggle the playing state of a sound in your playlists\r\n * Takes the playlist name as first argument, and the sound name as second argument \r\n * Example: /toggle-playlist-sound \"SFX\" \"Sword Clash\"\r\n */\r\n\r\nFurnacePlaylistQoL.PlaySound(args[0], args[1]);","author":"PEJBB2AYKoE5ZuxD","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"3t22b7DeBqd8OKz6","name":"Canvas Always-on-top","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tHqyy0sqn6mHlV0m"}},"scope":"global","command":"const video = $(`<video id='pip-video' autoplay='autoplay' onplay='this.requestPictureInPicture()'></video>`)[0];\nvideo.srcObject = $(\"#board\")[0].captureStream();\nconst playVideo = () => {\n   if (video.readyState < 2) setTimeout(playVideo, 0);\n   else video.play();\n};\nplayVideo();","author":"PEJBB2AYKoE5ZuxD","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"4aUMx41pvnZCJ52b","name":"teleport","permission":{"FRJk2q4bH9IdLZDf":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"// This macro only serves as an example. For a proper teleportation macro, check out the Dynamic Effects module.\r\n//\r\n// This macro requires the advanced macros of Furnace\r\n// This macro depends on /move-token\r\n// Takes X and Y as arguments\r\n\r\nconst macro = game.macros.getName(\"move-token\");\r\nif (!macro) {\r\n  ui.notifications.error(\"This macro depends on the 'move-token' macro, which could not be found.\");\r\n  return;\r\n}\r\nmacro.execute(args[0], args[1], true);\r\n","author":"FRJk2q4bH9IdLZDf","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"63bPkXo7BUsZEQJ0","name":"animate-pan","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3},"type":"script","flags":{},"scope":"global","command":"/* Pan the camera to the X, Y and scale positions.\r\n * See the 'pan-camera' macro for more details.\r\n * The first argument is the duration in milliseconds for the panning animation\r\n * The second argument is X, third argument is Y and fourth argument is the zoom level\r\n * Example: /animate-pan 500 1500 1500 0.5\r\n */\r\n\r\ncanvas.animatePan({duration: args[0], x: args[1], y: args[2], scale: args[3]})","author":"PEJBB2AYKoE5ZuxD","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"7g5Bw4kquOY7sr7j","name":"journal-dialog","permission":{"8pIGCEozfXNtPyHL":3},"type":"script","sort":400000,"flags":{},"scope":"global","command":"// This macro requires the advanced macros of Furnace\r\n// This will display the contents of a journal as a dialog\r\n// Takes one argument, the journal name\r\n// Example: /journal-dialog \"Welcome to my world\"\r\n\r\nconst journal = game.journal.entities.find(j => j.name === args[0])\r\nif (!journal) return;\r\nnew Dialog({content: journal.data.content,\r\n            buttons: {ok: {label: args[1] || \"ok\"}}}).render(true)","author":"8pIGCEozfXNtPyHL","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"CRaAk3V9gF6ihk1P","name":"Measure Token Distances","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"// This macro will measure the distance between the selected tokens\r\n// and every targetted tokens within a scene.\r\n// It will then output the measured distances to the chat\r\n// If called with an argument, determines who to whisper the message to,\r\n// otherwise sends it as a public message\r\n\r\nlet message = \"\"\r\nfor (let token of canvas.tokens.controlled) {\r\n   let ruler = canvas.controls.ruler;\r\n   for (let target of game.user.targets) {\r\n       ruler.clear()\r\n       ruler.waypoints.push(token.center)\r\n       ruler.labels.addChild(new PIXI.Text(\"\"));\r\n       ruler.measure(target.center);\r\n       let distance = ruler.labels.children[0].text;\r\n       message += `From '${token.name}' to '${target.name}' : ${distance}<br/>`\r\n       ruler.clear();\r\n   }\r\n}\r\nif (message) {\r\n   const whisper = args[0] ? ChatMessage.getWhisperIDs(args[0]) : undefined;\r\n   ChatMessage.create({content: message, whisper});\r\n}","author":"PEJBB2AYKoE5ZuxD","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Full Scene vision","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Rpgok2vhQ4nNton4"}},"scope":"global","command":"// This macro will effectively set the vision area in a scene to the entire gridded area\n// without having to shift any walls or tiles or tokens.\n// It will do this by removing the scene padding by setting it to 0,\n//  then changing the scene dimensions so the overall scene keeps the exact same size\n// It will also move the background image into a tile so it can be positiioned \n// at the same position as it was when the scene had padding\n\nconst width = canvas.scene.data.width;\nconst height = canvas.scene.data.height;\nconst grid = canvas.scene.data.grid;\nconst img = canvas.scene.data.img;\nconst padding = canvas.scene.data.padding;\nconst paddingX = Math.ceil(width * padding / grid) * grid;\nconst paddingY = Math.ceil(height * padding / grid) * grid;\n\nawait canvas.scene.update({img: null, width: width + 2 * paddingX, height: height + 2 * paddingY, padding: 0})\nif (img) {\n  const minZ = canvas.scene.data.tiles.length ? Math.min(...canvas.scene.data.tiles.map(t => t.z)) : 0;\n  await canvas.scene.createEmbeddedEntity('Tile', {width, height, img, scale: 1, rotation: 0, locked: true, hidden: false, x: paddingX, y: paddingY, z: minZ - 1});\n}","author":"PEJBB2AYKoE5ZuxD","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"MO5ZBnOxAMeMy7mU"}
{"_id":"Ns2y2EcwosuZOwtu","name":"roll-skill","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3},"type":"script","flags":{},"scope":"global","command":"/* This macro requires the advanced macros of Furnace and the LMRTFY module, v0.7+\r\n * This will request a skill check for the currently selected player using LMRTFY roll request dialog\r\n * Takes the skill as its first argument, or if not set, requests all\r\n * Example: /roll-skill \"prc\"\r\n */\r\n\r\nconst skill = args[0] || Object.keys(CONFIG.DND5E.skills);\r\nif (!actor) return;\r\nLMRTFYRoller.requestSkillChecks(actor, skill);","author":"PEJBB2AYKoE5ZuxD","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"PoygoBaDDvbDCluL","name":"current-time","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3},"type":"script","flags":{},"scope":"global","command":"// Returns the current time in format \"HH:MM\" (24 hour format)\r\nconst now = new Date();\r\nreturn `${now.getHours()}:${now.getMinutes()}`;","author":"PEJBB2AYKoE5ZuxD","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"T39hRCH2Ozk4oUZU","name":"Restore token creation","permission":{"FRJk2q4bH9IdLZDf":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"// This will restore your ability (if your player role had it) to drop actors onto a scene to create new tokens.\r\n// This is the complement for the \"Disallow token creation\" macro.\r\n\r\nif (game.disallow_token_creation_id) Hooks.off('preCreateToken', game.disallow_token_creation_id);\r\ngame.disallow_token_creation_id= 0;","author":"FRJk2q4bH9IdLZDf","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"Tu27SXg668TmcI1X","name":"Disallow token creation","permission":{"FRJk2q4bH9IdLZDf":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"// After running this macro, it will be impossible to drop any new tokens onto the scene, regardless of user permission\r\n// Running the 'Restore token creation' macro will restore the normal behavior.\r\n\r\nif (game.disallow_token_creation_id)\r\n   Hooks.off('preCreatetoken', game.disallow_token_creation_id);\r\ngame.disallow_token_creation_id = Hooks.on(\"preCreateToken\", () => false);","author":"FRJk2q4bH9IdLZDf","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"hbpdu5LvSAOAp5PX","name":"Say hello","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3},"type":"chat","flags":{},"scope":"global","command":"Hi {{game.user.name}}, it is now {{macro \"current-time\"}}","author":"PEJBB2AYKoE5ZuxD","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"rKmHs6LsBtDjPDhK","name":"Set Token bars and nameplate","permission":{"bWT4RleWjkaYiYKA":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"/* This will set every token in scene to always display their\r\n * token bars and nameplate, and sets the first bar to represent \r\n * HP and removes the second token bar.\r\n*/\r\n\r\nconst tokens =canvas.tokens.placeables.map(token => {\r\n   return {\r\n       _id: token.id,\r\n       \"bar1.attribute\": \"attributes.hp\",\r\n       \"bar2.attribute\": \"\",\r\n       \"displayName\": CONST.TOKEN_DISPLAY_MODES.ALWAYS,\r\n       \"displayBars\": CONST.TOKEN_DISPLAY_MODES.ALWAYS\r\n   };\r\n});\r\n\r\ncanvas.scene.updateEmbeddedEntity('Token', tokens)","author":"bWT4RleWjkaYiYKA","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"rMOgmYRkV0AZ1sjc","name":"move-token","permission":{"FRJk2q4bH9IdLZDf":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"/* This macro requires the advanced macros of Furnace\r\n * This will move the selected token to the designated position\r\n * Takes X and Y as arguments for the position (in pixels)\r\n * A third, optional, argument, if set to true, will disable the movement animation\r\n * Example: /move-token 1000 1500 false\r\n */\r\n\r\nconst x = args[0];\r\nconst y = args[1];\r\nconst noAnimate = args[2];\r\n\r\nif (!token) return;\r\nif (noAnimate) token._noAnimate = true;\r\nawait token.update({x, y})\r\ntoken._noAnimate = false;","author":"FRJk2q4bH9IdLZDf","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"wg8eFxpVcgewRvsu","name":"pan-camera","permission":{"FRJk2q4bH9IdLZDf":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"// Pan the canvas camera to a position X and Y, in pixels.\r\n// Can also set the zoom level using the third optional argument.\r\n// Example: /pan-camera 1500\r\n// Example: /pan-camera 2500 2000 0.3\r\n\r\ncanvas.pan({x: args[0], y: args[1], scale: args[2]})","author":"FRJk2q4bH9IdLZDf","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"yUlSqozYscIEOGz1","name":"play-audio","permission":{"FRJk2q4bH9IdLZDf":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"/* This macro requires the advanced macros of Furnace\r\n * This will play audio from a URL\r\n * Takes the URL of the audio file as its first argument\r\n * The second argument, if set to true, will play the audio for every other player too.\r\n * Example: /play-audio \"https://example.com/sound-effects/explosion.mp3\" true\r\n */\r\nconst url = args[0];\r\nconst push = args[1];\r\n\r\nAudioHelper.play({src: [url]}, push);","author":"FRJk2q4bH9IdLZDf","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Change Token Vision","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3},"type":"script","flags":{},"scope":"global","command":"// Open a dialog for quickly changing token vision parameters of the controlled tokens.\r\n// This macro was written by @Sky#9453\r\n// https://github.com/Sky-Captain-13/foundry\r\n\r\nif (canvas.tokens.controlled.length === 0)\r\n  return ui.notifications.error(\"Please select a token first\");\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Vision Type:</label>\r\n        <select id=\"vision-type\" name=\"vision-type\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"dim0\">Self</option>\r\n          <option value=\"dim30\">Darkvision (30 ft)</option>\r\n          <option value=\"dim60\">Darkvision (60 ft)</option>\r\n          <option value=\"dim90\">Darkvision (90 ft)</option>\r\n          <option value=\"dim120\">Darkvision (120 ft)</option>\r\n          <option value=\"dim150\">Darkvision (150 ft)</option>\r\n          <option value=\"dim180\">Darkvision (180 ft)</option>\r\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Light Source:</label>\r\n        <select id=\"light-source\" name=\"light-source\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"none\">None</option>\r\n          <option value=\"candle\">Candle</option>\r\n          <option value=\"lamp\">Lamp</option>\r\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\r\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\r\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\r\n          <option value=\"light\">Light (Cantrip)</option>\r\n          <option value=\"torch\">Torch</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\r\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\r\n        let dimSight = 0;\r\n        let brightSight = 0;\r\n        let dimLight = 0;\r\n        let brightLight = 0;\r\n        let lightAngle = 360;\r\n        let lockRotation = token.data.lockRotation;\r\n        // Get Vision Type Values\r\n        switch (visionType) {\r\n          case \"dim0\":\r\n            dimSight = 0;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim30\":\r\n            dimSight = 30;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim60\":\r\n            dimSight = 60;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim90\":\r\n            dimSight = 90;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim120\":\r\n            dimSight = 120;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim150\":\r\n            dimSight = 150;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim180\":\r\n            dimSight = 180;\r\n            brightSight = 0;\r\n            break;\r\n          case \"bright120\":\r\n            dimSight = 0;\r\n            brightSight= 120;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimSight = token.data.dimSight;\r\n            brightSight = token.data.brightSight;\r\n        }\r\n        // Get Light Source Values\r\n        switch (lightSource) {\r\n          case \"none\":\r\n            dimLight = 0;\r\n            brightLight = 0;\r\n            break;\r\n          case \"candle\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"lamp\":\r\n            dimLight = 45;\r\n            brightLight = 15;\r\n            break;\r\n          case \"bullseye\":\r\n            dimLight = 120;\r\n            brightLight = 60;\r\n            lockRotation = false;\r\n            lightAngle = 52.5;\r\n            break;\r\n          case \"hooded-dim\":\r\n            dimLight = 5;\r\n            brightLight = 0;\r\n            break;\r\n          case \"hooded-bright\":\r\n            dimLight = 60;\r\n            brightLight = 30;\r\n            break;\r\n          case \"light\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"torch\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimLight = token.data.dimLight;\r\n            brightLight = token.data.brightLight;\r\n            lightAngle = token.data.lightAngle;\r\n            lockRotation = token.data.lockRotation;\r\n        }\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"PEJBB2AYKoE5ZuxD","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"zEOWQFblsTskw7jX"}
